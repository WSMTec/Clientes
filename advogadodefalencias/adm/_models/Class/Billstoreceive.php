<?phpuse Source\Read;class Billstoreceive {    private $Data;    private $Products;    private $Code;    private $Error;    private $Result;    //Nome da tabela no banco de dados    const Entity = 'ctrec';    public function ExeCreate(array $Data) {        $this->Data = $Data;        if (!isset($this->Data['DEMIS']) || !isset($this->Data['DVENC']) || !isset($this->Data['IdCliente'])) {            $this->Error = ["Para finalizar o cadastro, favor preencha os campos obrigatórios!", "warning"];            $this->Result = false;            return;        }        if (strtotime($this->Data['DEMIS']) > strtotime($this->Data['DVENC'])) {            $this->Error = ["A data de emissão não pode ser maior que a data de vencimento!", "error"];            $this->Result = false;            return;        }        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        $this->Data['VLPAG'] = Check::RealDB($this->Data['VLPAG']);        $this->Data['Situacao'] = "A";        $Read = new Read();        $Read->ExeRead("cadbco", "WHERE IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']} AND IdReg = {$this->Data['CodBco']}");        if (!$Read->getResult()):            $this->Error = ["Banco selecionado não existe!", "warning"];            $this->Result = false;            return;        else:            $this->Data['CodBco'] = $Read->getResult()[0]['CodBco'];            $this->Data['Agencia'] = $Read->getResult()[0]['Agencia'];            $this->Data['Nconta'] = $Read->getResult()[0]['NConta'];            $this->Data['DigConta'] = $Read->getResult()[0]['DigConta'];            $this->Data['Carteira'] = $Read->getResult()[0]['Carteira'];        endif;        $Read->ExeRead("cadcli", "WHERE IdCliente = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "code={$this->Data['IdCliente']}");        $this->Data['DESCRICAO'] = $Read->getResult()[0]['NOME'];        $Create = new Create;        $Create->ExeCreate("ctrec", $this->Data);        if (!$Create->getResult()) {            $this->Error = ["Opsss!!! Não foi possivel cadastrar a conta a receber.", "error"];            $this->Result = false;            return;        } else {            $this->Error = ["Conta a receber foi realizado com sucesso!"];            $this->Result = true;            return;        }    }//    public function ExeCancel($CodeId) {//        $this->Code = (int) $CodeId;////        $ReadCode = new Read();//        $ReadCode->ExeRead(self::Entity, "WHERE IdNota = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                "code={$this->Code}");////        if (!$ReadCode->getResult())://            $this->Error = ["A compra que você tentou cancelar não existe no sistema!", "info"];//            $this->Result = false;//        else://            $Update = new Update;//            $Name = $ReadCode->getResult()[0]['NPEDDO'];//            $Update->ExeUpdate(self::Entity, array("Status" => "C"), "WHERE IdNota = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                    "code={$this->Code}");////            $this->Error = ["A compra <b>{$Name}</b> foi cancelada com sucesso no sistema!"];//            $this->Result = true;//        endif;//    }//    public function ExeUpdate($CodeId, array $Data) {//        $this->Code = (int) $CodeId;//        $this->Data = $Data;////        $this->Data = array_map('strip_tags', $this->Data);//        $this->Data = array_map('trim', $this->Data);////        if (empty($this->Data['NOME'])) {//            $this->Error = ["Para atualizar um vendedor, favor preencha os campos necessários!", "warning"];//            $this->Result = false;//            return;//        }////        $this->getData();////        $Read = new Read;////        $Read->ExeRead(self::Entity, "WHERE //        IdVendedor != :id AND NOME = :v AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                "id={$this->Code}&v={$this->Data['NOME']}");//        if ($Read->getResult()) {//            $this->Error = ["O Vendedor está cadastrado em nossa base de dados, favor tente outro!", "error"];//            $this->Result = false;//            return;//        }//        $Read->ExeRead(self::Entity, "WHERE NOME = :v AND IdVendedor != :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                "v={$this->Data['NOME']}&id={$this->Code}");//        if ($Read->getResult()) {//            $this->Error = ["O Vendedor {$this->Data['NOME']} está cadastrado em nossa base de dados, favor tente outro!", "error"];//            $this->Result = false;//            return;//        }////        $Read->ExeRead(self::Entity, "WHERE IdVendedor = :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                "id={$this->Code}");//        if (!$Read->getResult()) {//            $this->Error = ["Você tentou atualizar um vendedor(a) que não existe", "error"];//            $this->Result = false;//            return;//        }////        $Update = new Update;//        $Update->ExeUpdate(self::Entity, $this->Data, "WHERE IdVendedor = :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                "id={$this->Code}");//        if ($Update->getResult())://            $this->Error = ["O Vendedor(a) <b>{$this->Data['NOME']}</b> foi atualizado com sucesso!"];//            $this->Result = true;//        endif;//    }//    public function ExeDelete($CodeId) {//        $this->Code = (int) $CodeId;////        $ReadCode = new Read();//        $ReadCode->ExeRead(self::Entity, "WHERE IdVendedor = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                "code={$this->Code}");////        if (!$ReadCode->getResult())://            $this->Error = ["O Vendedor(a) que você tentou deletar não existe no sistema!", "info"];//            $this->Result = false;//        else://            $Delete = new Delete;//            $Name = $ReadCode->getResult()[0]['NOME'];////            $Delete->ExeDelete(self::Entity, "WHERE IdVendedor = :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",//                    "id={$this->Code}");////            $this->Error = ["O Vendador(a) <b>{$Name}</b> foi removido com sucesso do sistema!"];//            $this->Result = true;//        endif;//    }    public function ExeUnif($Data) {        $this->Data = $Data;        $Unify = $this->Data['data'];        $Arr = explode(',', $this->Data['data']);        unset($this->Data['data']);        if (in_array('', $Arr)) {            $this->Error = ["Selecione os titulos para unificar!", "info"];            $this->Result = false;            return;        }        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        $Arr = array_map('strip_tags', $Arr);        $Arr = array_map('trim', $Arr);        $Read = new Source\Read;        $Sum = 0;        foreach ($Arr as $k => $item) {            $Read->ExeRead("ctrec", "WHERE NCONT = :id AND IdEmpresa = :ide", "id={$item}&ide={$_SESSION['userlogin']['IdEmpresa']}");            $Sum += $Read->getResult()[0]['VLPAG'];            if ($Read->getResult()[0]['Situacao'] == 'U' || $Read->getResult()[0]['Situacao'] == 'Q' || $Read->getResult()[0]['Situacao'] == 'C') {                $this->Error = ["Somente títulos abertos podem ser unificados", "warning"];                $this->Result = false;                return;            }        }        if (!isset($this->Data['DEMIS']) || !isset($this->Data['DVENC']) || !isset($this->Data['IdCliente'])) {            $this->Error = ["Para unificar, favor preencha os campos obrigatórios!", "warning"];            $this->Result = false;            return;        }        if (strtotime($this->Data['DEMIS']) > strtotime($this->Data['DVENC'])) {            $this->Error = ["A data de emissão não pode ser maior que a data de vencimento!", "error"];            $this->Result = false;            return;        }        $Update = new Update();        foreach ($Arr as $k => $item) {            $Update->ExeUpdate(self::Entity,                    array(                        "Situacao" => "U",                    ),                    "WHERE NCONT = :id AND IdEmpresa = :ide",                    "id={$item}&ide={$_SESSION['userlogin']['IdEmpresa']}");        }        $Read->ExeRead("cadbco", "WHERE IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']} AND IdReg = {$this->Data['CodBco']}");        if (!$Read->getResult()):            $this->Error = ["Banco selecionado não está cadastrado!", "warning"];            $this->Result = false;            return;        else:            $this->Data['CodBco'] = $Read->getResult()[0]['CodBco'];            $this->Data['Agencia'] = $Read->getResult()[0]['Agencia'];            $this->Data['Nconta'] = $Read->getResult()[0]['NConta'];            $this->Data['DigConta'] = $Read->getResult()[0]['DigConta'];            $this->Data['Carteira'] = $Read->getResult()[0]['Carteira'];            $this->Data['VLPAG'] = $Sum;            $this->Data['Situacao'] = 'A';            $this->Data['IdEmpresa'] = $_SESSION['userlogin']['IdEmpresa'];            $this->Data['Unificados'] = $Unify;        endif;        $Read->ExeRead("cadcli", "WHERE IdCliente = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "code={$this->Data['IdCliente']}");        $this->Data['DESCRICAO'] = $Read->getResult()[0]['NOME'];        $Create = new Create;        $Create->ExeCreate("ctrec", $this->Data);        if (!$Create->getResult()) {            $this->Error = ["Opsss!!! Não foi possivel cadastrar a conta a receber.", "error"];            $this->Result = false;            return;        } else {            $this->Error = ["Os títulos foram unificados com sucesso!"];            $this->Result = true;            return;        }    }    public function ExeDown($Data) {        $this->Data = $Data;        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        $Read = new Source\Read;        $Read->ExeRead("ctrec", "WHERE NCONT = :id AND IdEmpresa = :ide", "id={$this->Data['NCONT']}&ide={$_SESSION['userlogin']['IdEmpresa']}");        $Create = new Create();        $Update = new Update();        $New = false;        if (strtotime(date("Y-m-d")) > strtotime($this->Data['DBaixa'])) {            $this->Error = ["A data da baixa não pode ser menor que a data de hoje!", "error"];            $this->Result = false;            return;        }        $this->Data['VLPAGO'] = Check::RealDB($this->Data['VLPAGO']);        $this->Data['Status'] = (isset($this->Data['Status']) ? $this->Data['Status'] : null);        if ($Read->getResult()[0]['VLPAG'] > $this->Data['VLPAGO']) {            $Arr = array(                "IdEmpresa" => $Read->getResult()[0]['IdEmpresa'],                "Npeddo" => $Read->getResult()[0]['Npeddo'],                "Nnota" => $Read->getResult()[0]['Nnota'],                "IdCliente" => $Read->getResult()[0]['IdCliente'],                "DVENC" => $Read->getResult()[0]['DVENC'],                "DEMIS" => $Read->getResult()[0]['DEMIS'],                "DESCRICAO" => $Read->getResult()[0]['DESCRICAO'],                "NDOC" => $Read->getResult()[0]['NDOC'],                "ESPPAG" => $Read->getResult()[0]['ESPPAG'],                "VLPAG" => ($Read->getResult()[0]['VLPAG'] - $this->Data['VLPAGO']),                "CodBco" => $Read->getResult()[0]['CodBco'],                "Agencia" => $Read->getResult()[0]['Agencia'],                "Nconta" => $Read->getResult()[0]['Nconta'],                "Situacao" => "A"            );            $Create->ExeCreate("ctrec", $Arr);            $New = true;        }        $Read->ExeRead("plconta", "WHERE IdPlConta = :i", "i={$this->Data['IdPlConta']}");        $Arr = array(            "Situacao" => "Q",            "DBaixa" => $this->Data['DBaixa'],            "Conta" => $Read->getResult()[0]['Conta'],            "DescPlConta" => $Read->getResult()[0]['Descricao'],            "VLPAGO" => $this->Data['VLPAGO'],            "Status" => $this->Data['Status']        );        $Update->ExeUpdate("ctrec", $Arr, "WHERE NCONT = :id AND IdEmpresa = :ide", "id={$this->Data['NCONT']}&ide={$_SESSION['userlogin']['IdEmpresa']}");        if ($Create->getResult() && $Update->getResult()) {            $this->Error = ["O título foi baixado com sucesso e um novo titulo foi criado pela diferença de valores!"];            $this->Result = true;            return;        }        if ($Update->getResult()) {            $this->Error = ["O título foi baixado com sucesso!"];            $this->Result = true;            return;        }    }    private function getData() {//        $this->Data['COMISSAO'] = Check::OnlyPorcent($this->Data['COMISSAO']);    }    public function getResult() {        return $this->Result;    }    public function getError() {        return $this->Error;    }}