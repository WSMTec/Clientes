<?phpclass AdminCtrec {    private $Data;    private $Products;    private $Code;    private $Error;    private $Result;    //Nome da tabela no banco de dados    const Entity = 'pdvenda';    public function ExeCreate(array $Data) {        $this->Data = $Data;        unset($this->Data['DVENC'], $this->Data['DEMIS'], $this->Data['VLPAG'], $this->Data['Dias'], $this->Data['NPARC'], $this->Data['Prazo']);        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        $Ctrec = array();        foreach ($_SESSION['cobranca'] as $k => $item) {            $Ctrec[] = array_merge($_SESSION['cobranca'][$k], array(                "IdCliente" => $this->Data['id_cli'],                "ESPPAG" => $this->Data['ESPPAG'],                "DESCRICAO" => $this->Data['DESCRICAO'],                "NDOC" => $this->Data['NDOC'],                "Situacao" => 'A'            ));        }        $Create = new Create();        foreach ($Ctrec as $k => $item):            $DataC = array_map('strip_tags', $item);            $DataC = array_map('trim', $item);            $Create->ExeCreate("ctrec", $DataC);        endforeach;        if (!$Create->getResult()) {            $this->Error = ["Opsss!!! Não foi possivel cadastrar.", "red", "lnr lnr-warning", 4000];            $this->Result = false;            return;        } else {            $this->Error = ["Sua conta foi cadastrada com sucesso!", "green", "lnr lnr-smile", 4000];            $this->Result = true;            return;        }    }    public function ExeCancel($CodeId) {        $this->Code = (int) $CodeId;        $ReadCode = new Read();        $ReadCode->ExeRead(self::Entity, "WHERE IdNota = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "code={$this->Code}");        if (!$ReadCode->getResult()):            $this->Error = ["A compra que você tentou cancelar não existe no sistema!", "info"];            $this->Result = false;        else:            $Update = new Update;            $Name = $ReadCode->getResult()[0]['NPEDDO'];            $Update->ExeUpdate(self::Entity, array("Status" => "C"), "WHERE IdNota = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                    "code={$this->Code}");            $this->Error = ["A compra <b>{$Name}</b> foi cancelada com sucesso no sistema!"];            $this->Result = true;        endif;    }    public function ExeUpdate($CodeId, array $Data) {        $this->Code = (int) $CodeId;        $this->Data = $Data;        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        if (empty($this->Data['NOME'])) {            $this->Error = ["Para atualizar um vendedor, favor preencha os campos necessários!", "warning"];            $this->Result = false;            return;        }        $this->getData();        $Read = new Read;        $Read->ExeRead(self::Entity, "WHERE         IdVendedor != :id AND NOME = :v AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "id={$this->Code}&v={$this->Data['NOME']}");        if ($Read->getResult()) {            $this->Error = ["O Vendedor está cadastrado em nossa base de dados, favor tente outro!", "error"];            $this->Result = false;            return;        }        $Read->ExeRead(self::Entity, "WHERE NOME = :v AND IdVendedor != :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "v={$this->Data['NOME']}&id={$this->Code}");        if ($Read->getResult()) {            $this->Error = ["O Vendedor {$this->Data['NOME']} está cadastrado em nossa base de dados, favor tente outro!", "error"];            $this->Result = false;            return;        }        $Read->ExeRead(self::Entity, "WHERE IdVendedor = :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "id={$this->Code}");        if (!$Read->getResult()) {            $this->Error = ["Você tentou atualizar um vendedor(a) que não existe", "error"];            $this->Result = false;            return;        }        $Update = new Update;        $Update->ExeUpdate(self::Entity, $this->Data, "WHERE IdVendedor = :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "id={$this->Code}");        if ($Update->getResult()):            $this->Error = ["O Vendedor(a) <b>{$this->Data['NOME']}</b> foi atualizado com sucesso!"];            $this->Result = true;        endif;    }    public function ExeDelete($CodeId) {        $this->Code = (int) $CodeId;        $ReadCode = new Read();        $ReadCode->ExeRead(self::Entity, "WHERE IdVendedor = :code AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                "code={$this->Code}");        if (!$ReadCode->getResult()):            $this->Error = ["O Vendedor(a) que você tentou deletar não existe no sistema!", "info"];            $this->Result = false;        else:            $Delete = new Delete;            $Name = $ReadCode->getResult()[0]['NOME'];            $Delete->ExeDelete(self::Entity, "WHERE IdVendedor = :id AND IdEmpresa = {$_SESSION['userlogin']['IdEmpresa']}",                    "id={$this->Code}");            $this->Error = ["O Vendador(a) <b>{$Name}</b> foi removido com sucesso do sistema!"];            $this->Result = true;        endif;    }    public function ExeDown($Data) {        $this->Data = $Data;        $this->Data = array_map('strip_tags', $this->Data);        $this->Data = array_map('trim', $this->Data);        $Read = new Read;        $Read->ExeRead("ctrec", "WHERE NCONT = :id", "id={$this->Data['NCONT']}");        $Create = new Create();        $Update = new Update();        $New = false;        if (strtotime(date("Y-m-d")) > strtotime($this->Data['DBaixa'])) {            $this->Error = ["A data da baixa não pode ser menor que a data de hoje!", "blue", "lnr lnr-warning", 4000];            $this->Result = false;            return;        }        $this->Data['VLPAGO'] = Check::RealDB($this->Data['VLPAGO']);        $this->Data['Status'] = (isset($this->Data['Status']) ? $this->Data['Status'] : null);        if ($Read->getResult()[0]['VLPAG'] > $this->Data['VLPAGO']) {            $Arr = array(                "IdCliente" => $Read->getResult()[0]['IdCliente'],                "DVENC" => $Read->getResult()[0]['DVENC'],                "DEMIS" => $Read->getResult()[0]['DEMIS'],                "DESCRICAO" => $Read->getResult()[0]['DESCRICAO'],                "NDOC" => $Read->getResult()[0]['NDOC'],                "ESPPAG" => $Read->getResult()[0]['ESPPAG'],                "VLPAG" => ($Read->getResult()[0]['VLPAG'] - $this->Data['VLPAGO']),                "Situacao" => "A"            );            $Create->ExeCreate("ctrec", $Arr);            $New = true;        }        $Arr = array(            "Situacao" => "Q",            "DBaixa" => $this->Data['DBaixa'],            "VLPAGO" => $this->Data['VLPAGO'],            "Status" => $this->Data['Status']        );        $Update->ExeUpdate("ctrec", $Arr, "WHERE NCONT = :id", "id={$this->Data['NCONT']}");        if ($Create->getResult() && $Update->getResult()) {            $this->Error = [""];            $this->Error = ["O título foi baixado com sucesso e um novo titulo foi criado pela diferença de valores!", "green", "lnr lnr-smile", 4000];            $this->Result = true;            return;        }        if ($Update->getResult()) {            $this->Error = ["O título foi baixado com sucesso!", "green", "lnr lnr-smile", 4000];            $this->Result = true;            return;        }    }    private function getData() {        $this->Data['COMISSAO'] = Check::OnlyPorcent($this->Data['COMISSAO']);    }    public function getResult() {        return $this->Result;    }    public function getError() {        return $this->Error;    }}